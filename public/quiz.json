[
    {
      "question": "What is Reconciliation?",
      "correct_answer": "The process through which React updates the DOM",
      "incorrect_answers": [
        "The process through which React deletes the DOM.",
        "The process through which React updates and deletes the component.",
        "It is a process to set the state."
      ]
    },
    {
      "question": "Which are the correct phases of component lifecycle?",
      "correct_answer": "Mounting: componentDidMount(); Updating: componentDidUpdate(); Unmounting: componentWillUnmount()",
      "incorrect_answers": [
        "Mounting: getDerivedStateFromProps(); Updating: componentWillUnmount(); Unmounting: shouldComponentUpdate()",
        "Mounting: componentWillUnmount(); Updating: render(); Unmounting: setState()",
        "Mounting: constructor(); Updating: getDerivedStateFromProps(); Unmounting: render()."
      ]
    },
    {
        "question": "What is React?",
        "correct_answer": "React is a Javascript library for building user interfaces",
        "incorrect_answers": [
          "React is a javascript framework for building user interfaces",
          "React is strictly component based, making it inflexible",
          "React is strictly non component based, making it inflexible"
        ]
    },
    {
        "question": "What is a SPA",
        "correct_answer": "An SPA is a Single Page Application",
        "incorrect_answers": [
          "An SPA is a sanitary Propritory Agent",
          "An SPA is an organisation designed to create single page application",
          "An SPA is an IT agreement"
        ]
    },

    
    {
        "question": "Which of the following are the advantages of React.js?",
        "correct_answer": "All of the above",
        "incorrect_answers": [
          "React.js can increase the application's performance with Virtual DOM.",
          "React.js is easy to integrate with other frameworks such as Angular, BackboneJS since it is only a view library.",
          "React.js can render both on client and server side."
        ]
    },
    {
        "question": "A class is a type of function, but instead of using the keyword function to initiate it, which keyword do we use?",
        "correct_answer": "Class",
        "incorrect_answers": [
          "Constructor",
          "Object",
          "DataObject"
        ]
    },
    {
        "question": "Which of the following acts as the input of a class-based component?",
        "correct_answer": "Props",
        "incorrect_answers": [
          "Class",
          "Factory",
          "Render"
        ]
    },
    {
        "question": "What kind of application architecture is widely used together with React JS?",
        "correct_answer": "Flux with MVC",
        "incorrect_answers": [
          "Flux",
          "MVC",
          "Singleton"
        ]
    },
    {
      "question": "PropTypes is used for:",
      "correct_answer": "Validation",
      "incorrect_answers": [
        "getPropsValue",
        "Typechecking",
        "All of the above"
      ]
    },
    {
      "question": "Which of the following correctly explains the term mounting?",
      "correct_answer": "A component is being inserted into the Virtual DOM",
      "incorrect_answers": [
        "A component is being removed from the DOM",
        "A component is being re-rendered",
        "A component is being inserted into the DOM"
      ]
    },
    {
      "question": "React JS focuses on which of the following part when considering MVC?",
      "correct_answer": "View",
      "incorrect_answers": [
        "Controller",
        "Model",
        "All of the above"
      ]
    },
    {
      "question": "Which function is invoked just before render() during initial rendering?",
      "correct_answer": "componentWillMount",
      "incorrect_answers": [
        "componentDidMount",
        "componentBeforeOccur",
        "componentReceiveWillMount"
      ]
    },
    {
      "question": "What method is used to change state?",
      "correct_answer": "setState()",
      "incorrect_answers": [
        "changeState()",
        "onChange()",
        "stateSet()"
      ]
    },
    {
      "question": "Which of the following method is called after getInitialState method?",
      "correct_answer": "componentWillMount",
      "incorrect_answers": [
        "componentDidMount()",
        "getDefaultProps",
        "render"
      ]
    },
    {
      "question": "Which of the following is TRUE about the difference between undefined and null?",
      "correct_answer": "All of the above",
      "incorrect_answers": [
        "A variable is undefined when it's been declared but hasn't been assigned a value",
        "Null is purposely assigned as a representation of 'no value'",
        "Undefined is returned when trying to access a non-existant property of an object"
      ]
    },
    {
      "question": "What function allows you to render React content in a HTML page?",
      "correct_answer": "ReactDOM.render()",
      "incorrect_answers": [
        "ReactDOM.start()",
        "React.render()",
        "React.mount()"
      ]
    },
    {
      "question": "How can you change a 'name' property inside a 'React.Component' Class component?",
      "correct_answer": "You cannot",
      "incorrect_answers": [
        "props['name'] = 'new name'",
        "this.props.name = 'new name'",
        "React.mount()"
      ]
    },
    {
      "question": "An arrow function:?",
      "correct_answer": "does not have its own 'this'",
      "incorrect_answers": [
        "has its own 'this'",
        "has its own 'this' in strict-mode only",
        "React.mount()",
        "has its own 'this' when passed in the methods call() or apply()"
      ]
    },
    {
      "question": "How is let different from var?",
      "correct_answer": "All of the above",
      "incorrect_answers": [
        "Let is block scoped",
        "Let isn't hoisted",
        "Let can't be redeclared",
        "has its own 'this' when passed in the methods call() or apply()"
      ]
    },
    {
      "question": "How transform JSX code in browser?",
      "correct_answer": "Standard Babel and react preset",
      "incorrect_answers": [
        "JSXTransformer is recommended by Facebook",
        "You can't use JSX in browser",
        "All of the above"
      ]
    },
    {
      "question": "Which of the following is FALSE about the pure functional Components:",
      "correct_answer": "Aren't useful for presentational components",
      "incorrect_answers": [
        "No Class needed",
        "Are easy to test",
        "No THIS keyword needed"
      ]
    },
    {
      "question": "Which feature can we use to cause a component to render only when its ID changes?",
      "correct_answer": "shouldComponentUpdate()",
      "incorrect_answers": [
        "constructor()",
        "componentWillUnmount()",
        "componentDidCatch()"
      ]
    },
    {
      "question": "What is a promise?",
      "correct_answer": "All of the above",
      "incorrect_answers": [
        "An object that represents a possible future value",
        "An object that's used for deferred and asynchronous computations",
        "A proxy for a value that will eventually become available"
      ]
    },
    {
      "question": "ShallowRenderer.render():",
      "correct_answer": "renders a single level deep",
      "incorrect_answers": [
        "require DOM",
        "You can't test components isolated from children",
        "Does support refs"
      ]
    },
    {
      "question": "Which of the following API is a MUST for every React JS component?",
      "correct_answer": "render",
      "incorrect_answers": [
        "getInitialState",
        "renderComponent",
        "All of the above"
      ]
    }

]

